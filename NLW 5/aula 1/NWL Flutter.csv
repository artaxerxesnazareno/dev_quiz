Frente,Verso
Para que serve o método setState() em Flutter e quando deve ser usado?,"O método setState() é usado para notificar o framework Flutter que o estado interno de um objeto mudou e que essas mudanças podem afetar a interface do usuário. Quando setState() é chamado, o framework reconstrói a parte da UI que depende desse estado."
Qual a diferença entre Hot Reload e Hot Restart no Flutter?,"Hot Reload: Atualiza rapidamente apenas o código alterado, preservando o estado atual da aplicação. É útil para ajustes de UI. Hot Restart: Reinicia completamente a aplicação, perdendo todo o estado. É útil quando há mudanças estruturais maiores ou quando o Hot Reload não funciona corretamente."
Qual a diferença e quando usar Container e Center no Flutter?,"Container: Widget versátil que combina posicionamento, dimensionamento e estilização. Pode ter decoração, cor, margens, padding e constraints. Center: Widget específico para centralizar seu filho no espaço disponível. É uma versão simplificada do Align com alignment definido como center."
O que é o widget Stack no Flutter e quando deve ser usado?,"O Stack é um widget que permite empilhar elementos, posicionando-os uns sobre os outros. Deve ser usado quando você precisa sobrepor widgets, como criar elementos flutuantes, cartões sobrepostos ou efeitos visuais em camadas."
Como alinhar elementos dentro de um Stack usando o widget Align?,"O widget Align permite posicionar elementos dentro de um Stack usando coordenadas. O parâmetro alignment aceita valores de -1 a 1 para os eixos X e Y, onde (0,0) é o centro."
Como personalizar um CircularProgressIndicator no Flutter?,"Para personalizar um CircularProgressIndicator, defina: value (valor entre 0.0 e 1.0 ou null para indeterminado), strokeWidth (espessura da linha), backgroundColor (cor do fundo do círculo), valueColor (cor da linha de progresso, usando AlwaysStoppedAnimation<Color>)."
Para que serve o widget PreferredSize no Flutter e como ele é usado com AppBar?,"O PreferredSize é usado para definir dimensões personalizadas para widgets como AppBar. Ele permite criar barras de aplicativos com alturas diferentes da padrão, ou implementar AppBars totalmente personalizadas."
Como usar Text.rich com TextSpan para criar texto com diferentes estilos no mesmo widget?,"Text.rich com TextSpan permite criar textos com diferentes estilos (tamanho, cor, peso) em um único widget de texto, sem precisar dividir em múltiplos Text widgets."
O que é uma SplashScreen e qual sua importância em aplicativos Flutter?,"SplashScreen é a tela inicial exibida por alguns segundos quando o aplicativo é iniciado. Suas funções incluem: melhorar a experiência do usuário durante o carregamento, reforçar a identidade da marca, permitir o carregamento de recursos/dados necessários em segundo plano."
Como configurar e usar rotas nomeadas (named routes) em Flutter?,"Rotas nomeadas permitem navegar entre telas usando strings em vez de instâncias de widgets, facilitando a manutenção do código. Configure no MaterialApp e use Navigator.pushNamed ou Navigator.pushReplacementNamed para navegar."
Qual a vantagem de estruturar widgets em camadas separadas (como AppBarWidget, ScoreCardWidget, ChartWidget)?,"A estrutura de widgets em camadas separadas oferece: reutilização de código, manutenção mais fácil, organização melhor, testabilidade, desenvolvimento em equipe."
Como implementar gradientes em Flutter e quais são os tipos disponíveis?,"Gradientes são implementados através da propriedade decoration em um Container, usando BoxDecoration com LinearGradient (gradiente em linha reta), RadialGradient (gradiente em círculo a partir de um ponto) ou SweepGradient (gradiente circular ao redor de um ponto)."
Como usar Expanded com a propriedade flex para criar layouts proporcionais em Flutter?,"O widget Expanded com a propriedade flex permite dividir o espaço disponível entre widgets filhos em proporções definidas: coloque widgets dentro de Row ou Column, envolva-os em Expanded, defina valores proporcionais com flex."
Qual a diferença entre CrossAxisAlignment e MainAxisAlignment em Row e Column?,"MainAxisAlignment: Controla o posicionamento dos filhos ao longo do eixo principal (horizontal em Row, vertical em Column). CrossAxisAlignment: Controla o posicionamento dos filhos ao longo do eixo cruzado (vertical em Row, horizontal em Column)."