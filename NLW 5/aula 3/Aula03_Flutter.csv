Frente,Verso
O que é ValueNotifier e como usá-lo para gerenciamento de estado em Flutter?,"ValueNotifier é uma classe que notifica seus ouvintes quando seu valor muda. É útil para: gerenciamento de estado simples, notificação de mudanças de valor, e atualização automática da UI."
Como usar enums para gerenciar estados em Flutter?,"Enums são úteis para: definir estados possíveis da aplicação, tornar o código mais legível e type-safe, e facilitar o controle de fluxo com switch/case. Exemplo: enum HomeState { loading, success, error, empty }."
O que é o Repository Pattern e como implementá-lo em Flutter?,"Repository Pattern é um padrão de projeto que: separa a lógica de acesso a dados, abstrai a fonte de dados (API, local, etc), e facilita testes e manutenção."
Como implementar modelos de dados em Flutter com fromJson/fromMap?,"Boas práticas: usar factory constructors para parse, implementar fromJson e fromMap, validar dados no construtor, e usar tipos corretos para cada campo."
Como e quando usar Extensions em Dart para melhorar o código?,"Extensions permitem: adicionar funcionalidades a tipos existentes, melhorar a legibilidade do código, e criar conversões e utilitários reutilizáveis."
Como implementar um grid de widgets com GridView.count?,"GridView.count é útil para: criar layouts em grade, definir número fixo de colunas, e controlar espaçamento entre itens. Use crossAxisCount para número de colunas e mainAxisSpacing/crossAxisSpacing para espaçamento."
Para que servem as assertions em Dart e quando usá-las?,"Assertions são úteis para: validar condições em tempo de desenvolvimento, garantir invariantes do código, e documentar requisitos de forma executável."
Como carregar e gerenciar assets (JSON, imagens) em Flutter?,"Para carregar assets: 1. Declare no pubspec.yaml, 2. Use rootBundle.loadString para JSON, 3. Use Image.asset para imagens, 4. Organize em pastas por tipo."
Como implementar um Controller para gerenciar estado em Flutter?,"Um Controller deve: centralizar lógica de negócios, gerenciar estado da tela, comunicar com Repository, e notificar mudanças de estado."
Como implementar tratamento de erros em Flutter de forma elegante?,"Boas práticas: use try/catch em operações assíncronas, atualize estado para indicar erro, forneça feedback visual ao usuário, e mantenha estados consistentes."
Como o ValueNotifier ajuda no gerenciamento de estado da HomePage?,"ValueNotifier permite notificar widgets sobre mudanças de estado automaticamente, mantendo a UI sincronizada com os dados e facilitando a atualização da interface."
Por que usar enum HomeState em vez de strings para controle de estado?,"Enums oferecem type-safety, evitam erros de digitação, facilitam refatoração e tornam o código mais manutenível comparado a strings."
Qual a vantagem de usar o Repository Pattern na implementação dos quizzes?,"O Repository Pattern separa responsabilidades, facilita testes, permite trocar fontes de dados sem afetar a UI e melhora a manutenibilidade do código."
Como o GridView.count ajuda na organização dos QuizCardWidgets?,"GridView.count permite organizar widgets em grade com número fixo de colunas, espaçamento controlado e rolagem automática, ideal para exibir múltiplos cards."
Por que usar assertions na validação de questões do quiz?,"Assertions ajudam a garantir que regras de negócio sejam respeitadas durante o desenvolvimento, como garantir que cada questão tenha exatamente 4 respostas."
Como o Controller separa a lógica de negócios da UI?,"O Controller centraliza a lógica de negócios, gerencia estado e comunicação com Repository, mantendo a UI limpa e focada apenas na apresentação."
Qual a importância das Extensions na implementação do Level enum?,"Extensions permitem adicionar funcionalidades ao enum Level sem modificá-lo, como conversão de string para enum e vice-versa, mantendo o código organizado."
Como o tratamento de erros melhora a experiência do usuário?,"Tratamento de erros adequado fornece feedback claro ao usuário, mantém a aplicação estável e permite recuperação graciosa de falhas."
Por que usar factory constructors nos modelos de dados?,"Factory constructors permitem lógica personalizada na criação de objetos, facilitam conversão de JSON/Map e permitem retornar instâncias cacheadas quando necessário."
Como o carregamento assíncrono de dados afeta a UI?,"O carregamento assíncrono requer tratamento adequado de estados (loading, success, error) para manter a UI responsiva e fornecer feedback apropriado ao usuário." 